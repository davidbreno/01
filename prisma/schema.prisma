generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEDICO
  RECEPCAO
}

enum Status {
  AGENDADA
  CONFIRMADA
  CANCELADA
  CONCLUIDA
}

enum ImplantCategory {
  CMI
  HE
  HI_TAPA
}

enum DocumentType {
  RECEITA
  PRONTUARIO
  DOCUMENTO_PESSOAL
  RADIOGRAFIA
  OUTRO
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(RECEPCAO)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  logs      AuditLog[]
  consultas Consulta[] @relation("MedicoConsultas")
  prontuarios Prontuario[] @relation("CriadoPor")
  resetTokens PasswordResetToken[]
}

model Paciente {
  id           String       @id @default(cuid())
  nome         String
  cpf          String       @unique
  nascimento   DateTime
  sexo         String
  telefone     String?
  email        String?
  endereco     String?
  convenio     String?
  carteirinha  String?
  alergias     String?
  observacoes  String?
  arquivado    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  consultas    Consulta[]
  prontuarios  Prontuario[]
  documentos   DocumentRecord[]
  anamneses    AnamneseResposta[]
}

model Consulta {
  id         String   @id @default(cuid())
  pacienteId String
  medicoId   String
  inicio     DateTime
  fim        DateTime
  status     Status   @default(AGENDADA)
  notas      String?
  lembreteAgendado DateTime?
  lembreteEnviado  Boolean   @default(false)
  paciente   Paciente @relation(fields: [pacienteId], references: [id])
  medico     User     @relation("MedicoConsultas", fields: [medicoId], references: [id])
  prontuario Prontuario?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([medicoId, inicio])
  @@index([pacienteId, inicio])
}

model Prontuario {
  id          String      @id @default(cuid())
  pacienteId  String
  consultaId  String? @unique
  criadoPorId String
  conteudo    Json
  paciente    Paciente    @relation(fields: [pacienteId], references: [id])
  consulta    Consulta?   @relation(fields: [consultaId], references: [id])
  criadoPor   User        @relation("CriadoPor", fields: [criadoPorId], references: [id])
  anexos      Attachment[]
  createdAt   DateTime    @default(now())
}

model Attachment {
  id           String     @id @default(cuid())
  prontuarioId String
  url          String
  mime         String
  prontuario   Prontuario @relation(fields: [prontuarioId], references: [id])
  createdAt    DateTime   @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  before    Json?
  after     Json?
  ip        String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([createdAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model ImplantItem {
  id          String          @id @default(cuid())
  nome        String
  categoria   ImplantCategory
  modelo      String
  tamanho     String?
  marca       String
  quantidade  Int             @default(0)
  imagemUrl   String?
  descricao   String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model MaterialItem {
  id         String   @id @default(cuid())
  nome       String
  marca      String?
  unidade    String
  quantidade Int      @default(0)
  descricao  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DocumentRecord {
  id         String        @id @default(cuid())
  titulo     String
  tipo       DocumentType
  arquivoUrl String
  arquivoMime String
  pacienteId String?
  notas      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  paciente   Paciente?    @relation(fields: [pacienteId], references: [id])
}

model AnamneseQuestion {
  id        String             @id @default(cuid())
  pergunta  String
  categoria String?
  ativa     Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  respostas AnamneseResposta[]
}

model AnamneseResposta {
  id          String            @id @default(cuid())
  pacienteId  String
  questionId  String
  resposta    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  paciente    Paciente          @relation(fields: [pacienteId], references: [id])
  pergunta    AnamneseQuestion  @relation(fields: [questionId], references: [id])

  @@unique([pacienteId, questionId])
}
